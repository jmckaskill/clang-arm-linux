CC = $TOOLCHAIN_DIR/host/bin/clang
CPP = $TOOLCHAIN_DIR/host/bin/clang++
AR = $TOOLCHAIN_DIR/host/bin/llvm-ar
LD = $TOOLCHAIN_DIR/host/bin/ld.lld${EXE_EXT}
LIB = $TOOLCHAIN_DIR/lib/arm

CFLAGSCMN = -mstrict-align -g $INCLUDES -I $TOOLCHAIN_DIR/lib/arm/include -flto --target=armv7---linux-eabi -Xclang -target-feature -Xclang -neon --system-header-prefix=sys -fdiagnostics-format=msvc -D_GNU_SOURCE -DHAVE_THREADS_H -nostdinc
CFLAGS = $CFLAGSCMN -Wall -Werror -Wno-missing-braces -Wno-unused-function
CXXFLAGS = -std=c++11 -I $LIB/include/c++ $CFLAGSCMN  -Wall -Werror -Wno-missing-braces
LIBS_SO = $LIB/libcpp.so $LIB/libc.so $LIB/libclang-rt.so
LIBS_A = $LIB/libc.a $LIB/libclang-rt.a

HOST = ${HOST_BASE}-debug
TGT = arm-debug

rule extcc
 command = $CC $EXT_INCLUDES $CFLAGSCMN -std=c11 -fdata-sections -ffunction-sections -MMD -MF $out.d -c $in -o $out
 deps = gcc
 depfile = $out.d
 description = ARM-CC $in

rule cc
 command = $CC $CFLAGS -std=c11 -fdata-sections -ffunction-sections -MMD -MF $out.d -c $in -o $out -pedantic
 deps = gcc
 depfile = $out.d
 description = ARM-CC $in

rule ccdll
 command = $CC $CFLAGS -std=c11 -fdata-sections -ffunction-sections -fvisibility=hidden -fPIC -MMD -MF $out.d -c $in -o $out
 deps = gcc
 depfile = $out.d
 description = ARM-CC $in

rule cxx
 command = $CPP $CXXFLAGS -fdata-sections -ffunction-sections -MMD -MF $out.d -c $in -o $out 
 deps = gcc
 depfile = $out.d
 description = ARM-CXX $in

rule cxxdll
 command = $CPP $CXXFLAGS -fvisibility=hidden -fPIC -MMD -MF $out.d -c $in -o $out -I clang-arm-linux/include/c++
 deps = gcc
 depfile = $out.d
 description = ARM-CXX $in

rule lib
 command = $AR rcs $out $in
 description = ARM-AR $out

rule clink
 command = $LD --nostdlib --whole-archive --gc-sections -o $out $in $LIBS_A $LIB/crt1.o
 description = C-ARM-EXE $out

rule cxxlink
 command = $LD --dynamic-linker /lib/ld-musl-arm.so.1 --nostdlib --whole-archive --gc-sections -o $out $in $LIBS_SO $LIB/crt1.o
 description = CPP-ARM-EXE $out

rule clinkdll
 command = $LD --shared --nostdlib -o $out $in $DEFLIBS
 description = ARM-DLL $out


rule js-compile
 command = java -jar $TOOLCHAIN_DIR/closure-compiler.jar -O BUNDLE --rewrite_polyfills=false --js_output_file $out $in
 description = JS-COMPILE $out

include $SRC_NINJA
